{
  "rightNumber" : 6,
  "style" : {
    "fontStyle" : "normal",
    "fontName" : "Avenir",
    "fontWeight" : "normal",
    "fontFamily" : "Avenir",
    "enablePalette" : true
  },
  "skeletonTheme" : {
    "name" : "cable-taperedline",
    "palette" : [

    ],
    "topicStyleForMain" : {
      "lineType" : 1,
      "topicShape" : 0,
      "lineWidth" : 3
    },
    "topicStyleForSubtopic" : {
      "lineType" : 1,
      "topicShape" : 1,
      "lineWidth" : 3
    },
    "mapStyle" : {
      "taperedLine" : true
    },
    "topicStyleForCentral" : {
      "lineType" : 1,
      "topicShape" : 0,
      "lineWidth" : 3
    },
    "topicStyleForFloating" : {
      "lineType" : 1,
      "topicShape" : 0,
      "lineWidth" : 3
    },
    "relationshipStyle" : {
      "lineWidth" : 2
    }
  },
  "id" : "98443EC0-D035-461D-9FF7-6FA8B8D7FE12-33734-00024A5099D2DB9C",
  "updateTime" : 1558522097.126709,
  "colorTheme" : {
    "name" : "summer",
    "palette" : [
      "{124, 214, 212, 1.00}",
      "{178, 148, 139, 1.00}",
      "{242, 198, 19, 1.00}",
      "{173, 217, 55, 1.00}",
      "{251, 168, 71, 1.00}",
      "{102, 106, 126, 1.00}"
    ],
    "topicStyleForMain" : {
      "lineType" : 2,
      "lineWidth" : 5,
      "fontStyle" : "normal",
      "fontWeight" : "normal",
      "topicMargin" : "{16, 6}",
      "topicShape" : 1,
      "fontColor" : "{91, 91, 91, 1.00}",
      "lineColor" : "{124, 214, 212, 1.00}",
      "fillColor" : "{255, 255, 255, 1.00}",
      "fontName" : "AvenirNext-Regular",
      "cornerRadius" : 8,
      "fontFamily" : "Avenir Next"
    },
    "topicStyleForSubtopic" : {
      "lineType" : 2,
      "lineWidth" : 5,
      "fontStyle" : "normal",
      "fontWeight" : "normal",
      "topicMargin" : "{6, 6}",
      "topicShape" : 1,
      "fontColor" : "{91, 91, 91, 1.00}",
      "lineColor" : "{124, 214, 212, 1.00}",
      "fillColor" : "{255, 255, 255, 1.00}",
      "fontName" : "AvenirNext-Regular",
      "cornerRadius" : 8,
      "fontFamily" : "Avenir Next"
    },
    "mapStyle" : {
      "fillColor" : "{255, 255, 255, 1.00}",
      "lineType" : 0
    },
    "topicStyleForCentral" : {
      "lineType" : 1,
      "lineWidth" : 5,
      "fontStyle" : "normal",
      "fontWeight" : "normal",
      "topicMargin" : "{28, 16}",
      "topicShape" : 0,
      "fontColor" : "{102, 106, 126, 1.00}",
      "lineColor" : "{102, 106, 126, 1.00}",
      "fillColor" : "{255, 255, 255, 1.00}",
      "fontName" : "AvenirNext-Regular",
      "cornerRadius" : 12,
      "fontFamily" : "Avenir Next"
    },
    "topicStyleForFloating" : {
      "lineType" : 2,
      "lineWidth" : 5,
      "fontStyle" : "normal",
      "fontWeight" : "normal",
      "topicMargin" : "{16, 6}",
      "topicShape" : 1,
      "fontColor" : "{91, 91, 91, 1.00}",
      "lineColor" : "{124, 214, 212, 1.00}",
      "fillColor" : "{255, 255, 255, 1.00}",
      "fontName" : "AvenirNext-Regular",
      "cornerRadius" : 8,
      "fontFamily" : "Avenir Next"
    },
    "relationshipStyle" : {
      "lineWidth" : 3,
      "lineColor" : "{255, 87, 34, 1.00}"
    }
  },
  "detachedTopics" : [
    {
      "detach" : true,
      "style" : {
        "lineColor" : "{124, 214, 212, 1.00}",
        "fontName" : "Avenir",
        "fontStyle" : "normal",
        "fontWeight" : "normal",
        "fontFamily" : "Avenir",
        "enablePalette" : true
      },
      "folded" : false,
      "id" : "4ED652F6-189C-44C2-9087-7089BE8339A3-24036-0000F25BECF88C32",
      "checkList" : false,
      "title" : "自由主题",
      "position" : "{-711.15779361858949, -2630.2737670299257}",
      "note" : {

      },
      "highlight" : false,
      "checkboxStatus" : 0
    }
  ],
  "rootTopic" : {
    "detach" : false,
    "style" : {
      "fontStyle" : "normal",
      "fontName" : "Avenir",
      "fontWeight" : "normal",
      "fontFamily" : "Avenir",
      "enablePalette" : true
    },
    "folded" : false,
    "id" : "58F79EC6-5B81-4513-B865-67C31F2FB7C7-33734-00024A5099D316D8",
    "checkList" : false,
    "title" : "juc",
    "position" : "{0, 0}",
    "note" : {

    },
    "highlight" : false,
    "subtopics" : [
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{178, 148, 139, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "A1C5F7B7-646C-483B-AA00-AC1DD1913E81-33734-000279CA13FE69B3",
        "checkList" : false,
        "title" : "创建线程",
        "position" : "{0, 0}",
        "note" : {

        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{178, 148, 139, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "24A14051-B3C1-4B8B-8233-37BD5F5C03D4-33734-000279CA13FEDA9F",
            "checkList" : false,
            "title" : "继承Thread类",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{178, 148, 139, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "D9E2394D-B205-44EF-8E9E-B64344BCE9A6-33734-000279CA13FF5360",
            "checkList" : false,
            "title" : "实现Runnable接口",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{242, 198, 19, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "B19F221E-B9F4-43C7-81ED-C089C44B8210-33734-000279CA1594082D",
        "checkList" : false,
        "title" : "线程状态",
        "position" : "{0, 0}",
        "note" : {
          "text" : "https:\/\/github.com\/phillau\/-\/blob\/master\/juc\/线程状态转换.png"
        },
        "highlight" : false,
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{173, 217, 55, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "215197D7-3F9E-43CA-876F-D2777FD5E2FA-33734-000279CA167172FB",
        "checkList" : false,
        "title" : "串行，并发，并行",
        "position" : "{0, 0}",
        "note" : {

        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{173, 217, 55, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "961A092C-8BD8-4111-94C6-ADA0F41F451C-33734-000279CA1671D145",
            "checkList" : false,
            "title" : "串行（sequential）：单线程顺序执行任务",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{173, 217, 55, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "8D864EC3-98B7-42F4-8B2A-4B7FCFD7A280-33734-000279CA16723176",
            "checkList" : false,
            "title" : "并发（concurrent）：线程通过时间片切换并发执行任务，如果任务有等待时间的话可以提高任务执行效率，因为线程可以在a任务需要等待的时候执行b任务",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{173, 217, 55, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "A64DD554-B951-47C6-A9C4-951EC3D0D7DF-33734-000279CA16728C44",
            "checkList" : false,
            "title" : "并行（parallel）：多个线程并行执行多个任务，每个线程负责一个任务",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{251, 168, 71, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "A0AEB0CB-EC21-4EAF-9E27-39394F10A203-33734-000279CA17EFAA1E",
        "checkList" : false,
        "title" : "竞态",
        "position" : "{0, 0}",
        "note" : {
          "text" : "计算结果的正确性依赖于相对时间顺序或者线程交错，表现为计算的结果时而正确时而错误。\n如果一个类能导致竞态，就不是线程安全的\n保障操作的原子性可以消除竞态"
        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{251, 168, 71, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "414DC165-C652-4CF0-9F6D-EF4192C8137A-33734-000279CA17F0090F",
            "checkList" : false,
            "title" : "两种模式",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{251, 168, 71, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "0F57560F-5F28-42A1-B0FA-0632A0D049D8-33734-000279CA17F059F1",
                "checkList" : false,
                "title" : "检测而后行动（check-then-act）",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{251, 168, 71, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "109E0B72-BBFD-411A-A8AC-E2AB1120E720-33734-000279CA17F0B866",
                "checkList" : false,
                "title" : "读—改—写（read-modify-write）",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{102, 106, 126, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "81AC3FF9-48C6-4DE0-BC60-EC6220295034-33734-000279CA198DB7F4",
        "checkList" : false,
        "title" : "线程安全三要素",
        "position" : "{0, 0}",
        "note" : {

        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "367D27CE-8E0A-4AAA-BFFE-0F71B6796BE8-33734-000279CA198E155C",
            "checkList" : false,
            "title" : "原子性",
            "position" : "{0, 0}",
            "note" : {
              "text" : "一个线程对共享变量的更新，对另一个线程来说，要么完成了，要么没发生，不会读取到中间状态"
            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "DB9E577D-72C0-4710-8A93-A29BF783966A-33734-000279CA198E6605",
                "checkList" : false,
                "title" : "实现方式",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "50E1F743-267A-4D7B-B1BF-B5FE5029015A-33734-000279CA198EB521",
                    "checkList" : false,
                    "title" : "CAS",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "677D1A60-EA4C-4201-BD8C-F1156209E8BA-33734-000279CA198F0CE1",
                    "checkList" : false,
                    "title" : "锁",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "subtopics" : [
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{102, 106, 126, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "8FD9A801-E6C2-4630-96FF-A98B2F9EEAF5-33734-000279CA198F5AEA",
                        "checkList" : false,
                        "title" : "synchronized",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{102, 106, 126, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "2A9C7EFB-42B0-4C54-A45B-CFA640355793-33734-000279CA198FAEF3",
                        "checkList" : false,
                        "title" : "lock",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      }
                    ],
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "D1ED424B-1DBF-4B35-AD31-12E6D82450A0-33734-000279CA1990096F",
                "checkList" : false,
                "title" : "特殊情况：double，long需要volatile修饰实现变量的原子性",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "B3CB9893-BE7D-4ED0-BD25-0E697A77F18D-33734-000279CA1990696F",
            "checkList" : false,
            "title" : "可见性",
            "position" : "{0, 0}",
            "note" : {
              "text" : "可见性是有序性的基础"
            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "66423654-3AF8-4197-BB08-672A7306F097-33734-000279CA1990B739",
                "checkList" : false,
                "title" : "实现方式",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "93B59188-CBBE-4F05-9FCD-E553DC3B4B09-33734-000279CA199102EA",
                    "checkList" : false,
                    "title" : "volatile",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "DA06A252-3937-4B7E-BBEC-7CDFFC99B31A-33734-000279CA199158CA",
                    "checkList" : false,
                    "title" : "锁",
                    "position" : "{0, 0}",
                    "note" : {
                      "text" : "线程在获取锁之后执行临界区代码前会刷新处理器缓存，读取最新的数据，释放锁之前会冲刷处理器缓存，将修改的数据更新到高速缓存，以此保证可见性"
                    },
                    "highlight" : false,
                    "subtopics" : [
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{102, 106, 126, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "9C54EEFC-60FF-4907-9EA7-BE60DB5773EA-33734-000279CA1991A47E",
                        "checkList" : false,
                        "title" : "synchronized",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{102, 106, 126, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "F778E527-2EBA-4C23-B34B-DF2899426F41-33734-000279CA1991F4EE",
                        "checkList" : false,
                        "title" : "lock",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      }
                    ],
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "60104205-8FFD-4F45-B84B-1463D83AC7A0-33734-000279CA19925215",
                "checkList" : false,
                "title" : "缓存一致性协议",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "2DE4674E-908F-405A-B900-10D1E5CC9927-33734-000279CA1992A808",
                "checkList" : false,
                "title" : "java语言规范",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "04EAB4D2-B34C-4224-BF84-3FC0B55D3F29-33734-000279CA1992F2C0",
                    "checkList" : false,
                    "title" : "父线程在启动子线程之前对共享变量的更新对于子线程来说是可见的",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "794D68E5-9A72-44D0-BB1E-1294B6C1A3D7-33734-000279CA1993427A",
                    "checkList" : false,
                    "title" : "一个线程结束之后该线程对共享变量的修改对于调用该线程的join方法的线程来说是可见的",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "44AEFC40-5F75-46F8-805C-9DF4F1D9C525-33734-000279CA19939A39",
            "checkList" : false,
            "title" : "有序性",
            "position" : "{0, 0}",
            "note" : {
              "text" : "有序性影响可见性"
            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "E9300FAE-DE4B-45B9-8599-7676A3EA6B78-33734-000279CA1993E4BE",
                "checkList" : false,
                "title" : "产生原因：重排序",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "重排序是在as-if-serial的语义前提下为了提高性能做的优化"
                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "A690559A-86CD-439D-8578-8BC0E1D88DE2-33734-000279CA1994369D",
                    "checkList" : false,
                    "title" : "指令重排序",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "subtopics" : [
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{102, 106, 126, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "4B9FA755-9537-41A9-8AA0-72F15B8AFE92-33734-000279CA19947FBB",
                        "checkList" : false,
                        "title" : "程序顺序与源代码顺序不一致",
                        "position" : "{0, 0}",
                        "note" : {
                          "text" : "重排序来源：javac编译器（基本不会导致指令重排序）"
                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{102, 106, 126, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "FDAE8D9E-0BEE-4F9D-9655-505CFAAC8BB4-33734-000279CA1994CF0A",
                        "checkList" : false,
                        "title" : "执行顺序与程序顺序不一致",
                        "position" : "{0, 0}",
                        "note" : {
                          "text" : "重排序来源：JIT编译器，处理器"
                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      }
                    ],
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "519CC1F6-AF70-42B6-97D9-9FABAB035768-33734-000279CA199523DA",
                    "checkList" : false,
                    "title" : "内存重排序（存储子系统重排序）",
                    "position" : "{0, 0}",
                    "note" : {
                      "text" : "我们这里将高速缓存和写缓冲器统称为存储子系统，它其实是处理器的子系统"
                    },
                    "highlight" : false,
                    "subtopics" : [
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{102, 106, 126, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "75A07611-97D7-4A8D-A32C-2D2223CAFBBD-33734-000279CA19956EE6",
                        "checkList" : false,
                        "title" : "源代码顺序，程序顺序，执行顺序这三者保持一致，但是感知顺序与执行顺序不一致",
                        "position" : "{0, 0}",
                        "note" : {
                          "text" : "重排序来源：高速缓存，写缓冲器"
                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{102, 106, 126, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "3FB21608-21D0-45F5-894A-23BC8B8A9AF5-33734-000279CA1995BF5C",
                        "checkList" : false,
                        "title" : "类型",
                        "position" : "{0, 0}",
                        "note" : {
                          "text" : "不同处理器架构所允许的内存重排序是不同的"
                        },
                        "highlight" : false,
                        "subtopics" : [
                          {
                            "detach" : false,
                            "style" : {
                              "lineColor" : "{102, 106, 126, 1.00}",
                              "fontName" : "Avenir",
                              "fontStyle" : "normal",
                              "fontWeight" : "normal",
                              "fontFamily" : "Avenir",
                              "enablePalette" : true
                            },
                            "folded" : false,
                            "id" : "2B0ECA82-C925-4602-85C2-8123C9DAD541-33734-000279CA19960B79",
                            "checkList" : false,
                            "title" : "LoadLoad",
                            "position" : "{0, 0}",
                            "note" : {

                            },
                            "highlight" : false,
                            "checkboxStatus" : 0
                          },
                          {
                            "detach" : false,
                            "style" : {
                              "lineColor" : "{102, 106, 126, 1.00}",
                              "fontName" : "Avenir",
                              "fontStyle" : "normal",
                              "fontWeight" : "normal",
                              "fontFamily" : "Avenir",
                              "enablePalette" : true
                            },
                            "folded" : false,
                            "id" : "2809AE25-A9F3-4481-B66E-2D8DCDA8F8E0-33734-000279CA19965BE8",
                            "checkList" : false,
                            "title" : "StoreStore",
                            "position" : "{0, 0}",
                            "note" : {

                            },
                            "highlight" : false,
                            "checkboxStatus" : 0
                          },
                          {
                            "detach" : false,
                            "style" : {
                              "lineColor" : "{102, 106, 126, 1.00}",
                              "fontName" : "Avenir",
                              "fontStyle" : "normal",
                              "fontWeight" : "normal",
                              "fontFamily" : "Avenir",
                              "enablePalette" : true
                            },
                            "folded" : false,
                            "id" : "1C39D07E-BE14-4699-A36D-C89C48D2AA68-33734-000279CA1996AFDB",
                            "checkList" : false,
                            "title" : "LoadStore",
                            "position" : "{0, 0}",
                            "note" : {

                            },
                            "highlight" : false,
                            "checkboxStatus" : 0
                          },
                          {
                            "detach" : false,
                            "style" : {
                              "lineColor" : "{102, 106, 126, 1.00}",
                              "fontName" : "Avenir",
                              "fontStyle" : "normal",
                              "fontWeight" : "normal",
                              "fontFamily" : "Avenir",
                              "enablePalette" : true
                            },
                            "folded" : false,
                            "id" : "23B853A4-A163-40EB-9B79-43C4B6DB1C4C-33734-000279CA1996FF3F",
                            "checkList" : false,
                            "title" : "StoreLoad",
                            "position" : "{0, 0}",
                            "note" : {

                            },
                            "highlight" : false,
                            "checkboxStatus" : 0
                          }
                        ],
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{102, 106, 126, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "1923B96D-B328-42DD-A4F3-18D90B83700F-33734-000279CA19975361",
                        "checkList" : false,
                        "title" : "貌似串行语义（as-if-serial）：为了保证此语义，存在数据依赖关系的语句不会被重排序，注意：存在控制依赖关系的语句（典型的如if语句）是可以被重排序的",
                        "position" : "{0, 0}",
                        "note" : {
                          "text" : "重排序并非胡乱的对指令和内存操作的结果进行杂乱无章的排序，而是编译器（主要是JIT），处理器（包括存储子系统）会遵循一定的规则，从而给单线程程序造成一种指令是按源代码顺序执行的假象。"
                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      }
                    ],
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "74EFDBD5-2BFE-40BB-B48B-7205DE4F8CED-33734-000279CA1997AE20",
                "checkList" : false,
                "title" : "实现方式",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "8D9A8E5B-1E24-4EC6-9DE4-B33A378E6516-33734-000279CA1997FAD3",
                    "checkList" : false,
                    "title" : "volatile（一定的有序性）",
                    "position" : "{0, 0}",
                    "note" : {
                      "text" : "在写操作之前插入StoreStore和LoadStore的复合屏障保证写volatile变量的操作与该操作之前的任何读写操作不能重排序。\n\n在读操作之后插入LoadStore和LoadLoad的复合屏障保证读volatile变量的操作与该操作之后的读写操作不能重排序"
                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "D0AA03EA-7449-4160-9B90-E3662F827F6B-33734-000279CA19984F2C",
                    "checkList" : false,
                    "title" : "锁",
                    "position" : "{0, 0}",
                    "note" : {
                      "text" : "由于锁对有序性和原子性的保障，使得读线程可以任务临界区内的变量是同时被更新的，即没有必要区分更新的顺序，即可以认为是按照源码顺序更新的，以此保障了有序性"
                    },
                    "highlight" : false,
                    "subtopics" : [
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{102, 106, 126, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "58533EF0-F5F5-465A-B496-6958A259DB6F-33734-000279CA1998996B",
                        "checkList" : false,
                        "title" : "synchronized",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{102, 106, 126, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "0F5D5876-3678-4C6F-BD61-6F8F05C08E89-33734-000279CA1998E878",
                        "checkList" : false,
                        "title" : "lock",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      }
                    ],
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "7B4E2476-8958-4DC6-9EA8-C749066365A1-33734-000279CA19993F91",
                "checkList" : false,
                "title" : "happens-before",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "C1BBD3B5-9A6A-404D-88DF-F3451AA7DAC7-33734-000279CA19998B2F",
                    "checkList" : false,
                    "title" : "程序次序规则：一个线程内，按照代码顺序，书写在前面的操作先行发生于书写在后面的操作",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "BD5DF521-5B1A-45C6-B77B-089AEA7A50C5-33734-000279CA1999D7F9",
                    "checkList" : false,
                    "title" : "锁定规则：一个unLock操作先行发生于后面对同一个锁的lock操作",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "713F6B49-400E-4DE8-B743-E4BF57A071DB-33734-000279CA199A24E7",
                    "checkList" : false,
                    "title" : "volatile变量规则：对一个变量的写操作先行发生于后面对这个变量的读操作",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "61AB461F-CB25-4B89-8F41-AF437481A377-3419-0000DFDAF7A064E9",
                    "checkList" : false,
                    "title" : "start()规则：如果线程A执行操作ThreadB.start()（启动线程B），那么A线程的ThreadB.start()操作happens-before于线程B中的任意操作。",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "F40B1982-DF12-4EA3-94F8-22784E09F4C1-3419-0000DFDF0B7EB1CC",
                    "checkList" : false,
                    "title" : "join()规则：如果线程A执行操作ThreadB.join()并成功返回，那么线程B中的任意操作happens-before于线程A从ThreadB.join()操作成功返回。",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "F525131F-CFF0-4847-BBE0-9B5B56BDCF01-33734-000279CA199A7EB7",
                    "checkList" : false,
                    "title" : "传递规则：如果操作A先行发生于操作B，而操作B又先行发生于操作C，则可以得出操作A先行发生于操作C",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{124, 214, 212, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "61CCD25F-9CB6-4765-8A3D-CD2A2F88749E-33734-000279CA2399E010",
        "checkList" : false,
        "title" : "上下文切换",
        "position" : "{0, 0}",
        "note" : {
          "text" : "上下文切换可以看作是多个线程共享一个处理器的产物，切出时需要从寄存器和程序计数器中保存到内存的进度信息就是上下文"
        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{124, 214, 212, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "7BCE1775-D856-4153-B6D9-EB847F8E731C-33734-000279CA239A32D7",
            "checkList" : false,
            "title" : "从java应用到角度看就是线程在Runnable和非Runnable状态（Waiting，TimeWaiting，Blocked）的切换",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{124, 214, 212, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "9C9DC43A-9DD3-4089-8212-8B48E352E7FE-33734-000279CA239A8762",
            "checkList" : false,
            "title" : "按照导致因素划分",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{124, 214, 212, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "7D47BAA3-F545-42CC-8FDB-79CD220B4D67-33734-000279CA239ACF4C",
                "checkList" : false,
                "title" : "自发性上下文切换",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{124, 214, 212, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "CD787BD1-DF70-4A41-BCD5-752FDFCF8DE8-33734-000279CA239B1126",
                    "checkList" : false,
                    "title" : "Thread.sleep()",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{124, 214, 212, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "4F552961-F172-4A14-BCFF-53D5349087CB-33734-000279CA239B570C",
                    "checkList" : false,
                    "title" : "Object.wait()",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{124, 214, 212, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "99F6B2F1-4EF8-4A12-B021-A31ECA660E0E-33734-000279CA239B9FF7",
                    "checkList" : false,
                    "title" : "Thread.yield()",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{124, 214, 212, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "3890F026-0D38-4EEB-ABDB-896D27CD77DD-33734-000279CA239BE621",
                    "checkList" : false,
                    "title" : "Thread.join()",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{124, 214, 212, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "8B7ACB42-98E5-4E22-9997-DEE50C1B1B10-33734-000279CA239C48C6",
                    "checkList" : false,
                    "title" : "LockSupport.park()",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{124, 214, 212, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "7F385BEF-7ABA-429E-BF36-F501B2BEE6F0-33734-000279CA239C94C6",
                    "checkList" : false,
                    "title" : "发起io操作",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{124, 214, 212, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "FCE7426F-1F69-444A-84FB-EFD39782E757-33734-000279CA239CEF60",
                    "checkList" : false,
                    "title" : "等待其他线程持有的锁",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{124, 214, 212, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "F57C05E6-C6FB-49D3-BE18-257257A8DEA6-33734-000279CA239D3F25",
                "checkList" : false,
                "title" : "非自发性上下文切换",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{124, 214, 212, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "A1E7F941-7297-4029-977E-592B417480EA-33734-000279CA239D8142",
                    "checkList" : false,
                    "title" : "由于线程调度器的原因被迫切出（时间片用完或者有更高优先级的线程需要执行）",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{124, 214, 212, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "79028406-FDFE-4F27-962C-EC9B33269EB3-33734-000279CA239DC64E",
                    "checkList" : false,
                    "title" : "垃圾回收导致的stop the world",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{124, 214, 212, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "7FD96998-A9DF-4DBD-87B8-F0F3006FEF0E-33734-000279CA239E1221",
            "checkList" : false,
            "title" : "工具：perf（可以查看上下文切换次数）",
            "position" : "{0, 0}",
            "note" : {
              "text" : "perf stat -e cpu-clock,cs,cache-references,cache-misses java io.github.viscent.mtia.ch1.FileDownloaderApp"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{178, 148, 139, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "7A432F09-A4B9-418E-A67A-59E9490C453E-33734-000279CA27ECF40F",
        "checkList" : false,
        "title" : "线程活性故障",
        "position" : "{0, 0}",
        "note" : {

        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{178, 148, 139, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "E9DAFE7B-DF17-49F3-BBE3-168603982925-33734-000279DFCF3F1128",
            "checkList" : false,
            "title" : "死锁（Deadlock）：鹬蚌相争",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{178, 148, 139, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "4C6B1791-EF8B-47C0-B742-7FD0452C37CC-674-00008C4E77AC5339",
                "checkList" : false,
                "title" : "死锁产生的必要条件",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{178, 148, 139, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "B98C9375-E6F7-44E7-9946-B3C938E6990A-674-000093FC6FE38B2E",
                    "checkList" : false,
                    "title" : "资源互斥",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{178, 148, 139, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "49C5F663-FE99-4196-B95C-4E98D2FC7EC9-674-000093FF57602B18",
                    "checkList" : false,
                    "title" : "资源不可抢夺",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{178, 148, 139, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "2A8D32F6-0B5E-4124-A0E8-4BAB2C29B399-674-00008C5780615257",
                    "checkList" : false,
                    "title" : "占用并等待资源",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{178, 148, 139, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "375337F1-3824-4BEE-93C9-EE40DDF4B0FA-674-00008C59B61E12B9",
                    "checkList" : false,
                    "title" : "循环等待资源",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{178, 148, 139, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "D35183AE-D10A-441B-89AC-C8DA23B8012F-674-00008C5D5B49AE87",
                "checkList" : false,
                "title" : "如何规避死锁",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{178, 148, 139, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "1AAA8A15-55C9-4295-9F28-07BB856EE85A-674-00008C619CEC89A8",
                    "checkList" : false,
                    "title" : "粗锁法",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{178, 148, 139, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "E275654F-3DD6-46A7-A53B-5C42E275101A-674-00008D7571FA05A9",
                    "checkList" : false,
                    "title" : "锁排序法",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{178, 148, 139, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "11D1B09F-FC12-4104-9FFD-324C6713D199-674-00008D9C717D0269",
                    "checkList" : false,
                    "title" : "使用ReentrantLock的tryLock(long,TimeUnit)",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{178, 148, 139, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "FF6CF996-60C3-416A-A3F6-710E917A70BE-674-00008ED71AA6A49D",
                    "checkList" : false,
                    "title" : "开放调用，即不加锁，比如原先需要在遍历HashSet时加了synchronized锁，现在改为用CopyOnWriteArraySet就可以去掉锁了",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{178, 148, 139, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "F5689882-966D-43E1-93FE-9F3D21BAFA31-674-00008F745A5C2B30",
                "checkList" : false,
                "title" : "死锁的故障恢复",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{178, 148, 139, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "7A2BA2D3-9175-4688-8E65-687F43C4D438-674-00008F7F3324E2C7",
                    "checkList" : false,
                    "title" : "如果用的synchronized或者Lock.lock()，死锁是不可恢复的，只能重启jvm",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{178, 148, 139, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "F84B0FFE-1920-4C91-9619-C0B802B4BDB7-33734-000279F117492C18",
            "checkList" : false,
            "title" : "锁死（Lockout）：睡美人",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{178, 148, 139, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "D2FAE303-CC62-4C94-AB84-5861FF334EC8-674-0000908AE199C618",
                "checkList" : false,
                "title" : "信号丢失锁死",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{178, 148, 139, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "248CEC66-B5C3-4E86-96C6-CDA79B38F6FD-674-0000908CA9EDD247",
                "checkList" : false,
                "title" : "嵌套监视器锁死",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{178, 148, 139, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "5B10E706-12D4-4C2C-833B-7149BDC5ADA2-33734-00027A09589C351C",
            "checkList" : false,
            "title" : "活锁（Livelock）：屡战屡败，屡败屡战",
            "position" : "{0, 0}",
            "note" : {
              "text" : "例子：例如线程从队列中拿出一个任务来执行，如果任务执行失败，那么将任务重新加入队列，继续执行。假设任务总是执行失败，或者某种依赖的条件总是不满足，那么线程一直在繁忙却没有任何结果。"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{178, 148, 139, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "1143DA31-AAA5-41CF-ADB7-7540631A9858-33734-00027A1C4D2C3D9C",
            "checkList" : false,
            "title" : "饥饿（Starvation）:巧妇难为无米之炊",
            "position" : "{0, 0}",
            "note" : {
              "text" : "典型例子：高争用模式下使用非公平读写锁"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{173, 217, 55, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "AEBD6A02-63D1-40B2-87EF-126CDF21FCED-33734-00027AED996D2466",
        "checkList" : false,
        "title" : "理想情况",
        "position" : "{0, 0}",
        "note" : {

        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{173, 217, 55, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "8D534EE3-6B9F-4A65-9E63-C22255070C66-33734-00027AF0D18F8D0F",
            "checkList" : false,
            "title" : "高并发",
            "position" : "{0, 0}",
            "note" : {
              "text" : "概念：处于Running状态的线程越多，则并发程度越高，简称高并发。"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{173, 217, 55, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "80D9763C-53D8-44CE-9C72-769ACCA3813E-33734-00027AF16ED60CE9",
            "checkList" : false,
            "title" : "低争用",
            "position" : "{0, 0}",
            "note" : {
              "text" : "概念：同时试图访问同一个已经被其他线程占用的资源的线程数越少，说明争用情况越低，简称低争用，反之就是高争用"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{173, 217, 55, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "006B5863-6A57-43CC-96E6-041246FDC717-24036-0000E6D26500059D",
            "checkList" : false,
            "title" : "优化思路",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{173, 217, 55, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "E963BB67-89D4-4BCD-8CDF-9C07CAE5B658-24036-0000E6DCD332E3C3",
                "checkList" : false,
                "title" : "消除锁的使用（使用锁的替代品）",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{173, 217, 55, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "55065E23-562A-4594-A6CA-0A83361A6F7C-24036-0000E6E4C1F743E1",
                "checkList" : false,
                "title" : "降低锁的争用程度",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{173, 217, 55, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "91B48B6D-925F-4C80-94AD-00899AC1EB6B-24036-0000E6EB27BE7556",
                    "checkList" : false,
                    "title" : "减少申请锁的频率",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{173, 217, 55, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "E9E2567F-4AF3-4352-A8BC-500C03ED56C0-24036-0000E6FE5BDEF64A",
                    "checkList" : false,
                    "title" : "缩短持有锁的时间（减小临界区长度）",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{251, 168, 71, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "961CA9B8-99FE-4DA4-8417-A7FD51AF4C31-33734-00027CA5E85172EA",
        "checkList" : false,
        "title" : "调度策略",
        "position" : "{0, 0}",
        "note" : {

        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{251, 168, 71, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "22221DFC-089C-4779-AB18-A0DDDB3A329B-33734-00027CA79D518940",
            "checkList" : false,
            "title" : "非公平调度策略（一般首选）：吞吐率高",
            "position" : "{0, 0}",
            "note" : {
              "text" : "申请资源的时间偏差可能较大，可能导致线程饥饿现象"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{251, 168, 71, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "112B44E4-B5C0-4936-A625-5B9FB18B00D2-33734-00027CABF1C512B9",
            "checkList" : false,
            "title" : "公平调度策略：吞吐率低",
            "position" : "{0, 0}",
            "note" : {
              "text" : "适合资源的持有线程占用时间相对较长的时候，或者对申请资源的时间偏差要求低的时候，不会导致饥饿现象"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{102, 106, 126, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "0F3ECC09-D1C9-4550-850D-EEAE956F4624-33734-00027F89B64A496E",
        "checkList" : false,
        "title" : "线程同步机制",
        "position" : "{0, 0}",
        "note" : {

        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "C78033D2-D2DD-450C-B7FF-829BDE891F6E-674-0000479B0CCDFA0F",
            "checkList" : false,
            "title" : "锁",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "A824E691-B0ED-43E5-9D82-255F2EA94304-674-0000479B0CCFC608",
                "checkList" : false,
                "title" : "锁的粒度",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "一个锁实例所保护的共享数据量的大小"
                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "EFC76D8B-0E04-4DB4-9E79-58042AD44953-674-0000479B0CD07C54",
                    "checkList" : false,
                    "title" : "粒度过粗：会导致线程在申请锁的时候需要进行不必要的等待",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{102, 106, 126, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "CBCD183A-1905-429A-A7E4-701564861F8E-674-0000479B0CD15EDC",
                    "checkList" : false,
                    "title" : "粒度过细：会增加锁调度的开销",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "BB8B7DD0-B7C5-452D-A24B-D072D18A9FB9-674-0000479B0CD23F3D",
                "checkList" : false,
                "title" : "锁的开销：主要包括锁的申请和释放所产生的开销以及锁可能导致的上下文切换的开销，这些开销主要是处理器时间",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "DC6FF76C-E5E1-4B07-B662-2AF281C6AE9A-674-0000479B0CD3137D",
                "checkList" : false,
                "title" : "synchronized：非公平锁",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "实现原理：jvm会在临界区之前和之后分别插入获取屏障和释放屏障使得临界区内的代码和临界区外的代码不能重排序，这种机制和锁排他性一起保障了原子性以及有序性，jvm还会类型volatile一样在monitorexit指令后面插入StoreLoad屏障，保障可见性。另外StoreLoad屏障还保证了一个锁的monitorexit指令不会和其他锁的monitorenter指令重排序，保证了monitorenter和monitorexit指令总是成对出现\n（对于x86处理器，monitorexit的实现本身就带有StoreLoad屏障的效果，所以不会在monitorexit后面再插入StoreLoad屏障了）"
                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "CCF6A573-CBA7-4C97-821B-90C88004820B-674-0000479B0CD3A027",
                "checkList" : false,
                "title" : "ReentrantLock：支持公平和非公平",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "jstack -l pid\n可以通过getQueueLength()获取此锁当前的等待线程数量"
                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "E1F0FC1D-5C01-444C-8396-21E7B645A81C-674-0000479B0CD42488",
                "checkList" : false,
                "title" : "ReentrantReadWriteLock",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "读写锁的降级：一个在获取写锁以后可以在释放写锁之前获取读锁"
                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "37112790-D49C-4644-BD61-0DF026E7AD73-674-0000479B0CD4A3F5",
                "checkList" : false,
                "title" : "volatile",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "不会引起上下文切换，所以叫轻量级锁\n保障可见性，有序性和保障long\/double型变量读写的原子性"
                },
                "highlight" : false,
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "B2FAE76B-16EE-47A2-B95A-0109DE350321-33734-00027F8DAD214E74",
            "checkList" : false,
            "title" : "volatile",
            "position" : "{0, 0}",
            "note" : {
              "text" : "x86处理器下jvm对此关键字做的事情是在volatile变量写操作后面插入StoreLoad屏障，保证将写缓冲器的数据冲刷到高速缓存并将其他处理器的对应数据置为无效，因为x86处理器只支持StoreLoad重排序，这里是用一个lock前缀的机器指令充当StoreLoad屏障的"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "ADF17588-F7C7-408F-93B6-4A9DBDA4A99F-33734-00027F8FAD28D434",
            "checkList" : false,
            "title" : "static",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "353C58CB-C9FB-422D-94E0-D3FFE45DF015-33734-00027F92715948C0",
            "checkList" : false,
            "title" : "final",
            "position" : "{0, 0}",
            "note" : {
              "text" : "当一个对象的引用对其他线程可见的时候，可以保证其他线程看到的该对象的final字段是初始化完毕的，并不能保障包含final属性的对象本身对外的可见性\n\nx86处理器下JIT需要保证final字段初始化的操作不会重排序到构造器完成之后，其他处理器下可能需要StoreStore屏障来保证"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "3E1BD218-B542-45A2-A372-C3188ECA7C9E-33734-00027F974A5DF5BA",
            "checkList" : false,
            "title" : "wait\/nofify",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{178, 148, 139, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "F0599A67-A2F0-4619-9F86-23EE7FF2F201-674-00000A3D96783A88",
        "checkList" : false,
        "title" : "CAS",
        "position" : "{0, 0}",
        "note" : {
          "text" : "这种更新机制是以cas是原子性为基础的，处理器会保障这一点，但是不保障可见性"
        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{178, 148, 139, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "7009BD44-5710-4F88-B7B4-57300FE06B67-674-00000B84F3AE0147",
            "checkList" : false,
            "title" : "原子变量类",
            "position" : "{0, 0}",
            "note" : {
              "text" : "基于cas实现的能保障对共享变量进行read-modify-write操作时的原子性和可见性的工具类，内部通常借助volatile变量实现，可以被看作增强型的volatile变量"
            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{178, 148, 139, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "2CC63E83-8D9D-496C-976E-FED5BCFEF537-674-00000BCB18B3327E",
                "checkList" : false,
                "title" : "基础数据型",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{178, 148, 139, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "9A2A5C6D-F625-43E1-9A16-0DA7D5CB7288-674-00000BCEE4722C04",
                "checkList" : false,
                "title" : "数组型",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{178, 148, 139, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "DF9302FB-5A31-47D1-88B9-D8A163908E8C-674-00000BD1E77A42AC",
                "checkList" : false,
                "title" : "字段更新型",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{178, 148, 139, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "7C8E78B4-67D6-484C-B011-06BD9BF1C44C-674-00000BD3DDE44486",
                "checkList" : false,
                "title" : "引用型",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{173, 217, 55, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "B1A42390-801E-4DCF-802A-E6930AB6EB54-674-00004BDFD2277C7F",
        "checkList" : false,
        "title" : "阿姆达尔定律：尽量减少程序中必须串行的部分",
        "position" : "{0, 0}",
        "note" : {
          "text" : "多线程程序的提速主要来自于多个线程对可并行化部分的耗时均摊，因此，为了能使多线程程序获得较大的提速，应该注意减少程序中必须串行的部分，而不是仅寄希望于增加线程"
        },
        "highlight" : false,
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{251, 168, 71, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "7FCE8B27-EA9E-43A9-B3D8-20BA301F8D2D-674-00004D98E89902AF",
        "checkList" : false,
        "title" : "实现并发化的策略",
        "position" : "{0, 0}",
        "note" : {
          "text" : "多线程编程的一个实施策略是从单线程程序向多线程程序进化"
        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{251, 168, 71, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "8F5552D3-B125-4FCD-9485-35730A097ABF-674-00004D9BF73F30ED",
            "checkList" : false,
            "title" : "基于数据的分割策略",
            "position" : "{0, 0}",
            "note" : {
              "text" : "从程序处理的数据入手，产生若干同质的工作者线程"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{251, 168, 71, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "1478AF16-A19F-4E14-9902-CC7CC3D0A247-674-00004D9E6B20EB14",
            "checkList" : false,
            "title" : "基于任务的分割策略",
            "position" : "{0, 0}",
            "note" : {
              "text" : "从程序的处理逻辑入手，产生多个相互协作的异质工作者线程"
            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{251, 168, 71, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "02ABF287-4927-4E01-9257-F273978A2FDE-674-00004DA4258ECD5D",
                "checkList" : false,
                "title" : "按任务资源消耗属性分割",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "一个线程执行的任务往往同时兼具CPU密集型和IO密集型特征，称为混合型任务\n有时候我们可能需要将这种混合型任务进一步分解为CPU密集型子任务和IO密集型子任务，分配不同的工作线程去执行，以提高并发性"
                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{251, 168, 71, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "BDA0AF1B-6C0A-4A87-90DE-091E35FB4E4F-674-00004DA425903F46",
                    "checkList" : false,
                    "title" : "CPU密集型：建议线程数为CPU个数+1",
                    "position" : "{0, 0}",
                    "note" : {
                      "text" : "消耗的主要资源是CPU时间\n典型场景：加密解密"
                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{251, 168, 71, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "2C6783C3-F65A-498F-A288-94BDD2B4939B-674-00004DA425911341",
                    "checkList" : false,
                    "title" : "I\/O密集型：建议线程数为2*CPU个数（当然如果一个线程都足以满足要求就没必要设置那么多了，一个不满足要求的话向2*CPU个数靠近）",
                    "position" : "{0, 0}",
                    "note" : {
                      "text" : "主要消耗的资源是IO资源（磁盘，网络等）\n典型场景：文件读写，网络读写"
                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{251, 168, 71, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "81447046-7A89-48F8-A056-29E229D9E7E1-674-00004DA9B1E38F17",
                "checkList" : false,
                "title" : "按处理步骤分割",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{102, 106, 126, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "043CFC2C-5F5D-4B5E-B1D5-50604EC02AE9-674-000050A9E37701BB",
        "checkList" : false,
        "title" : "线程间协作",
        "position" : "{0, 0}",
        "note" : {

        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "FBAC2664-080F-428B-82EC-CC8720CA3D61-674-000050B0F6ED4396",
            "checkList" : false,
            "title" : "wait\/notify",
            "position" : "{0, 0}",
            "note" : {
              "text" : "Object someObject = new Object();\nsynchronized (someObject){\n            while (保护条件){\n                someObject.wait();\n            }\n            doAction();\/\/目标动作\n        }\n\nsynchronized (someObject){\n            updateSharedState();\/\/更新共享变量\n            someObject.notify();\/\/唤醒其他线程\n        }"
            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "E9CF20AC-AAEA-4045-8B5C-AFC0202D3EAD-674-00005729DA8A9E51",
                "checkList" : false,
                "title" : "欺骗性唤醒",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "D5ACD429-909B-453F-9BCB-603E3E593DEC-674-0000579A4E7662C1",
                "checkList" : false,
                "title" : "信号丢失",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "某些情况notify会导致信号丢失问题，因此可以用notifyall规避，尽管notifyall可能导致额外的上下文切换开销"
                },
                "highlight" : false,
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "55DCCC26-D8FC-4EC3-8474-C7569A1FF278-674-00005A54E5B36106",
            "checkList" : false,
            "title" : "join",
            "position" : "{0, 0}",
            "note" : {
              "text" : "其实就是用的wait\/notify实现的"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "4F5CE9BA-5381-4C69-91BB-171484968CED-674-00005BDA2B561701",
            "checkList" : false,
            "title" : "condition",
            "position" : "{0, 0}",
            "note" : {
              "text" : " private final ReentrantLock lock = new ReentrantLock();\n    private final Condition condition = lock.newCondition();\n    public void guardMethod() {\n        lock.lock();\n        try {\n            while (保护条件){\n                condition.await();\n            }\n            doAction();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        } finally {\n            lock.unlock();\n        }\n    }\n\n    public void notifyMethod(){\n        lock.lock();\n        try {\n            updateSharedState();\n            condition.signal();\n        }finally {\n            lock.unlock();\n        }\n    }"
            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "9E9558E6-BA0B-4283-94F4-37D98C48ED62-674-00005E24CF4EABED",
                "checkList" : false,
                "title" : "可以通过在应用代码层次上建立条件变量和保护条件的对应关系，解决过早唤醒问题，因此其使用导致的上下文切换可能比wait\/notify少一些",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "019BFEF9-E03D-4F8A-A555-119E0663CDE7-674-00005E4BCE0BDA07",
                "checkList" : false,
                "title" : "可以通过awaitUtil的返回值确定是超时还是被通知导致的返回",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "BA5DA97A-5AAF-4DB9-837E-C35A19F492DC-674-00005E79EE150680",
            "checkList" : false,
            "title" : "CountDownLatch：一个countDownLatch实例只能够实现一次的等待和唤醒",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "82B37802-50A2-46D4-B4FB-11DB08010EEE-674-000060D89B645BE9",
            "checkList" : false,
            "title" : "CyclicBarrier：此实例是可以被重复使用的",
            "position" : "{0, 0}",
            "note" : {
              "text" : "如果代码中调用cyclicbarrier的wait方法时没有在循环当中，或者不是为了模拟高并发操作，那可能存在对cyclicbarrier的滥用\n因为此类的典型使用场景是使迭代算法并发化或者在测试代码中模拟高并发"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "B61E9A48-DEA1-4C52-8D44-6C81A75160C9-674-000067305B879A51",
            "checkList" : false,
            "title" : "阻塞队列",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "574AA69C-7B4C-4E88-B7E5-B350D15C02C9-674-000067305B890D54",
                "checkList" : false,
                "title" : "ArrayBlockingQueue：支持公平和非公平调度（适合消费者和生产者线程之间并发程度比较低的情况下使用）",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "使用数组作为存储空间，不会增加垃圾回收的负担。\nput，take操作使用的同一个锁，可能导致锁的高争用，进而造成较多的上下文切换"
                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "67E82079-39C0-48A6-AE8C-28CF88A9FE85-674-000067305B89E067",
                "checkList" : false,
                "title" : "LinkedBlockingQueue：只支持非公平调度（如果生产者和消费者之间的并发程度比较高，可能会加大队列内部锁的争用，此时适合选择此队列）",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "使用链表作为存储空间，可能增加垃圾回收的负担。\nput和take操作用的是两个锁，降低了锁争用的可能性。\n维护当前队列长度用的原子变量，可能导致额外的开销。"
                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{102, 106, 126, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "77AA090F-C589-48B6-B056-F85D4E32470D-674-000067305B8AC07C",
                "checkList" : false,
                "title" : "SynchronousQueue：支持公平和非公平调度",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "可能造成较多上下文切换\n适合在消费者和生产者处理能力相差不大的情况下使用"
                },
                "highlight" : false,
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "D4DE337E-C38B-4479-B240-8A26A32F772B-674-00006732B4FA6773",
            "checkList" : false,
            "title" : "Semaphore：通过配额实现流量控制（使用无界队列作为生产者消费者模式的传输通道时往往借助此类控制生产者的生产速率）",
            "position" : "{0, 0}",
            "note" : {
              "text" : "private final Semaphore semaphore = new Semaphore(10);\n    private final ArrayBlockingQueue queue = new LinkedBlockingQueue<P>();\n\n    public String put(P product){\n        semaphore.acquire();\n        try {\n            queue.put(product);\n       }finally {\n           semaphore.release();\n       }\n    }"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "F5527151-F38C-4DD9-A526-79D433491392-674-00006ADF0210745C",
            "checkList" : false,
            "title" : "PipeInputStream\/PipeOutputStream（适合在单生产者-单消费者模式使用）",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "AD0FFE5D-F5E6-4EAB-9AE6-2DE7C7172ADD-674-00006AE3DF1FA36F",
            "checkList" : false,
            "title" : "Exchanger",
            "position" : "{0, 0}",
            "note" : {
              "text" : "此类也可以作为传输通道，对双缓冲技术提供了支持，生产者消费者各维护一个缓冲区，双方通过执行exchange方法来交换各自持有的缓冲区，当消费者在消费一个填充满的缓存区时，生产者可以填充待填充的缓冲区，从而实现生产和消费的并发，此类便于我们能够对产品的粒度进行优化"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{102, 106, 126, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "45E07610-F897-47D4-B135-C9FFD1DF770B-674-00006BC6ED912C7C",
            "checkList" : false,
            "title" : "InterruptException：Two-Phase Termination模式",
            "position" : "{0, 0}",
            "note" : {
              "text" : "依照惯例，抛出InterruptException异常的方法，通常会在其抛出该异常时将当前线程的线程中断标记重置为false\n\n\/\/Two-Phase Termination模式\npublic class TerminatedThread extends Thread {\n    private volatile boolean flag = false;\n\n    @Override\n    public void run() {\n        while (!flag){\n            doAction();\n        }\n    }\n\n    private void doAction() {\n        System.out.println(\"hello\");\n        try {\n            Thread.sleep(100);\n        } catch (InterruptedException e) {\n        }finally {\n            System.out.println(\"done\");\n        }\n    }\n\n    public void shutDown(){\n        flag = true;\n        this.interrupt();\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        TerminatedThread thread = new TerminatedThread();\n        thread.start();\n        Thread.sleep(1000);\n        thread.shutDown();\n    }\n}\n"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{124, 214, 212, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "2950C30D-B0B9-4075-8BB6-1B996700726B-674-0000773619B102F5",
        "checkList" : false,
        "title" : "其他线程安全实现方式（锁的替代品）",
        "position" : "{0, 0}",
        "note" : {

        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{124, 214, 212, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "39E54014-4614-4925-9492-D89DA1DFFB9E-674-0000773E2F23450C",
            "checkList" : false,
            "title" : "无状态对象",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{124, 214, 212, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "D0277BF4-4DF3-49CB-A855-0BABB0541FA6-674-0000774025980E18",
            "checkList" : false,
            "title" : "不可变对象",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{124, 214, 212, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "A80584EF-60E9-45E7-BC00-987633BDF1D4-674-000077423EEBDB6C",
            "checkList" : false,
            "title" : "线程特有对象：ThreadLocal<T>（通常被申明为某个类的静态变量）",
            "position" : "{0, 0}",
            "note" : {
              "text" : "ThreadLocal相当于线程访问其线程特有对象的代理，即各个线程通过这个代理可以创建并访问各自的线程特有对象，泛型T表示线程特有对象的类型。一个线程可以使用不同的ThreadLocal实例创建并访问自己不同的线程特有对象，多个线程使用同一个ThreadLocal实例所访问到的是属于各自的不同的线程访问对象实例"
            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{124, 214, 212, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "177E1357-C607-43F4-8558-ED91825ED1B0-674-000082962B8A0145",
                "checkList" : false,
                "title" : "场景1：使用非线程安全对象，又不希望因此引入锁",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{124, 214, 212, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "BDD484BF-FE45-43B5-9459-E72AF8ACB01B-674-000082A54B0FA450",
                "checkList" : false,
                "title" : "场景2：使用线程安全对象，但是又希望避免其使用锁带来的开销和可能的高争用问题",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{124, 214, 212, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "E44C2244-7475-4DF7-8BA0-527C80DF23FF-674-000082B77EEA4052",
                "checkList" : false,
                "title" : "场景3：隐式参数传递（有观点认为隐式参数传递会使系统难于理解）",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{124, 214, 212, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "F6F18D95-3F67-4B16-9984-A300D37E6C59-674-0000830CCE3B52D0",
                "checkList" : false,
                "title" : "场景4：特定于线程的单例模式（希望每一个线程有且仅有一个该类的实例）",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{124, 214, 212, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "2E6D202D-E1D2-4C4E-8608-6EE567C01258-674-00008A252493E726",
            "checkList" : false,
            "title" : "java同步集合\/juc并发集合",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{124, 214, 212, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "57F0B6FF-7F12-4F4D-809C-CE4A4DCE1912-674-00008F09E9E50A2B",
            "checkList" : false,
            "title" : "volatile",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{124, 214, 212, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "D882C0BD-2F9E-49FD-8FC9-D93F273DE021-24036-0000EE3AF3AAC6F8",
            "checkList" : false,
            "title" : "原子变量",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{242, 198, 19, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "1ECC0148-74A0-4777-AF7D-B24C46A16B61-674-000096B9940B589A",
        "checkList" : false,
        "title" : "线程管理",
        "position" : "{0, 0}",
        "note" : {

        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{242, 198, 19, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "9E29FBB9-8D26-4F6C-86DA-85CA1F9CA46B-674-000096BB34D7559A",
            "checkList" : false,
            "title" : "异常处理：设置UncaughtExceptionHandler",
            "position" : "{0, 0}",
            "note" : {
              "text" : "public class UncaughtExceptionTest {\n    public static void main(String[] args) {\n        Thread thread = new Thread(() -> {\n            System.out.println(\"before\");\n            int i = 1 \/ 0;\n            System.out.println(\"after\");\n        });\n        thread.setUncaughtExceptionHandler((t, e) -> {\n            System.out.println(t.getName());\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e1) {\n                e1.printStackTrace();\n            }\n            e.printStackTrace();\n        });\n        thread.start();\n    }\n}"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{242, 198, 19, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "1A60A0A6-5270-4F1A-B526-679E8C07AE2F-674-000096BFCF3526CC",
            "checkList" : false,
            "title" : "线程组",
            "position" : "{0, 0}",
            "note" : {
              "text" : "线程与线程组的关系可以看作文件与文件夹的关系。\n如果仅仅为了区分一些线程与另外一些线程，我们可以使用线程的命名规则来实现，不同功能的线程以不同的规则命名。\n所以多数情况下我们可以忽略线程组这个概念的存在"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{242, 198, 19, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "17B67B62-BFA0-410A-9C79-912229E5BB72-674-00009967A2B4690A",
            "checkList" : false,
            "title" : "线程的暂挂与恢复：利用等待通知实现",
            "position" : "{0, 0}",
            "note" : {
              "text" : "package io.github.viscent.mtia.test;\n\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class PauseProceedTest extends ReentrantLock {\n\n    public static void main(String[] args) throws InterruptedException {\n        PauseProceedTest pauseProceedTest = new PauseProceedTest();\n        new Thread(() -> {\n            for (int i = 0; i < 10000; i++) {\n                int finalI = i;\n                pauseProceedTest.action(() -> {\n                    {\n                        System.out.println(\"干活中。。。\"+ finalI);\n                        try {\n                            Thread.sleep(100);\n                        } catch (InterruptedException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                });\n                try {\n                    Thread.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }).start();\n        Thread.sleep(5000);\n        System.out.println(\"停10秒\");\n        pauseProceedTest.suspend();\n        Thread.sleep(10000);\n        System.out.println(\"继续\");\n        pauseProceedTest.resume();\n    }\n\n    private volatile boolean suspend = false;\n    private final Condition condition = newCondition();\n\n    public void suspend() {\n        suspend = true;\n    }\n\n    public void resume() {\n        lock();\n        try {\n            suspend = false;\n            condition.signal();\n        } finally {\n            unlock();\n        }\n    }\n\n    public void action(Runnable r) {\n        lock();\n        try {\n            while (suspend) {\n                try {\n                    condition.await();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n            r.run();\n        } finally {\n            unlock();\n        }\n    }\n\n\/\/    public abstract void doAction();\n}\n"
            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{242, 198, 19, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "0F97F5C8-20DE-4746-927C-F52BE4DD58BE-674-00009AE31CE723FF",
            "checkList" : false,
            "title" : "线程池（生产者-消费者模式）",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{242, 198, 19, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "7F4C3D88-ED7A-4110-90AA-62963FD5B785-674-00009AE5952D0CA3",
                "checkList" : false,
                "title" : "七大参数",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{242, 198, 19, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "F98F927D-748A-4E91-B057-79232970A335-674-00009F736ED812AD",
                "checkList" : false,
                "title" : "shutdown()\/shutdownNow()",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "shutdown:已经提交的任务会继续执行，后面再提交的任务会交给拒绝策略。shutdown返回的时候线程池可能还未结束，所以需要调用awaitTemination等待线程池结束。\nshutdownNow:正在执行的任务会被停止，已提交还未执行的任务不会被执行，会作为返回值返回给用户处理。"
                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{242, 198, 19, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "5F1EDA88-ED31-42FE-BB42-760E8FB4005B-674-00009F79A85113E3",
                "checkList" : false,
                "title" : "线程池死锁",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "彼此有依赖关系的任务需要提交给不同的线程池执行以避免死锁"
                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{242, 198, 19, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "48C9A360-09A6-4552-AA9C-251B89CE3ED5-674-0000A1CBC523B2F7",
                "checkList" : false,
                "title" : "excute\/submit",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "execute：1、没有返回值 2、其执行过程中抛出的未捕获异常会被UncaughtExceptionHandler处理，我们通过ThreadFactory自定义UncaughtExceptionHandler来侦测执行过程中抛出的未捕获异常\nsubmit：1、可以通过返回的future.get()获取执行结果，也就是Callable的返回值 2、其执行过程中抛出的未捕获异常不会被UncaughtExceptionHandler处理，但是可以通过捕获future.get()抛出的异常来知晓任务执行过程中抛出的异常"
                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{242, 198, 19, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "AC6F7619-6CA4-40C0-965E-CCDE62C12030-674-0000A404D7283B1C",
                "checkList" : false,
                "title" : "线程池监控",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{242, 198, 19, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "764AB88B-F02F-4EEA-AABB-4756FE86D719-674-0000AAB2C3F9A8AB",
                "checkList" : false,
                "title" : "Executors",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{242, 198, 19, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "427A6D39-C904-4BBA-AE0F-1A0ECAE6CB5F-674-0000AAB5A9FB38B0",
                    "checkList" : false,
                    "title" : "Executors.newCachedThreadPool();",
                    "position" : "{0, 0}",
                    "note" : {
                      "text" : "适合大量耗时短且提交频率高的任务"
                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{242, 198, 19, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "68493E60-965A-40D2-AE61-5A02E7234E7C-674-0000AAB6810D57AA",
                    "checkList" : false,
                    "title" : "Executors.newFixedThreadPool(12);",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{242, 198, 19, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "0EF721F7-CD2D-4B32-9A57-C0D540276124-674-0000AAB76984943C",
                    "checkList" : false,
                    "title" : "Executors.newSingleThreadExecutor();",
                    "position" : "{0, 0}",
                    "note" : {
                      "text" : "适合单(多)生产者-单消费者模式"
                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{242, 198, 19, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "8851C6A5-18BE-4F75-B58E-3941AEC9A66F-96787-0000B5ED6CE916E1",
                    "checkList" : false,
                    "title" : "Executors.newScheduledThreadPool(2)",
                    "position" : "{0, 0}",
                    "note" : {
                      "text" : "interval：同一个任务，两次执行的开始时间之差，即为执行周期interval\n如果在执行过程中抛出未捕获异常，那么该任务就不会再被执行了"
                    },
                    "highlight" : false,
                    "subtopics" : [
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{242, 198, 19, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "EB0178A3-07F2-48E8-9972-42E11A972A56-96787-0000B5F31A73B1C4",
                        "checkList" : false,
                        "title" : "scheduleAtFixedRate：interval=max(任务执行时长，period)",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{242, 198, 19, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "442ECDD1-C6C2-4052-9E07-D52C7272005C-96787-0000B5F5EF7164AD",
                        "checkList" : false,
                        "title" : "scheduleWithFixedDelay：interval=任务执行时长+delay",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      }
                    ],
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{242, 198, 19, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "3D01CC20-7618-4CA3-B2C0-F82C55A94927-674-0000AD571724C4B4",
                "checkList" : false,
                "title" : "ExecutorCompletionService：异步任务的批量提交以及获取这些任务的执行结果",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{242, 198, 19, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "69EDBBD5-5C58-4587-B7ED-EA8A167F5B06-674-0000AEE1F4EB28DE",
                "checkList" : false,
                "title" : "FutureTask：融合了Runnale和Callable的好处，还支持future和回调，FutureTask是被设计用来表示一次性执行的任务，因此同一个futureTask实例不能被提交多次",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "futureTask同时实现了Runnable和Future接口，线程池的submit方法就是通过execute方法结合futureTask实现的：\n\npublic <T> Future<T> submit(Callable<T> task) {\n        if (task == null) throw new NullPointerException();\n        RunnableFuture<T> ftask = newTaskFor(task);\n        execute(ftask);\n        return ftask;\n    }"
                },
                "highlight" : false,
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{173, 217, 55, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "D351A36C-21FC-4F9D-AE45-128B1DB6D479-3419-0000BDEDD723C93B",
        "checkList" : false,
        "title" : "JMM",
        "position" : "{0, 0}",
        "note" : {
          "text" : "java为了屏蔽不同处理器的内存模型差异，必须定义自己的内存模型。这就是java内存模型JMM。\nJMM定义了final，volatile，synchronized关键字的行为。\nJMM定义了线程和主内存之间的抽象关系，线程之间共享的变量存储在主内存，每个线程有自己的私有的本地内存存储了该线程读写的共享变量的副本，本地内存是一个抽象概念，包括了缓冲，写缓冲区，寄存器等"
        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{173, 217, 55, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "5CC43A2D-659E-4DDF-9580-A80E0FF1DA47-3419-0000C0B53905E54C",
            "checkList" : false,
            "title" : "高速缓存",
            "position" : "{0, 0}",
            "note" : {
              "text" : "为程序所访问的每个变量保留了一份相应内存空间所存储数据的副本\n相当于硬件实现的存储容量很小的一个散列表，key为数据内存地址，value为缓存条目所组成的内存数据的副本或者准备写入内存的数据"
            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{173, 217, 55, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "80C96E77-176C-4913-B8CE-AA2336F22374-3419-0000C10783E6CA3F",
                "checkList" : false,
                "title" : "由于CPU高速缓存导致的缓存一致性问题：读脏数据和丢失更新",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{173, 217, 55, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "FD2DB8A2-CBE4-4CE8-8287-6EDAADEA61F6-3419-0000C1094D789473",
                "checkList" : false,
                "title" : "缓存条目",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{173, 217, 55, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "E4A78408-E037-4186-A96E-058267664BC0-3419-0000C10D2CCE5379",
                    "checkList" : false,
                    "title" : "Tag",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{173, 217, 55, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "E982BBCE-4A49-41CD-848B-ACBBF55FA61E-3419-0000C10C29D1BA87",
                    "checkList" : false,
                    "title" : "缓存行（Data Block）：高速缓存与主存数据交换的最小单元，用于存储从内存中读取或者准备写往内存的数据",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{173, 217, 55, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "735904F2-CAA7-4757-9E11-FF8EE7464102-3419-0000C1108A1B75D7",
                    "checkList" : false,
                    "title" : "Flag",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "subtopics" : [
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{173, 217, 55, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "BAF56BC6-62D9-4ADE-8DF2-36B032DFF660-3419-0000C127A27F9E4D",
                        "checkList" : false,
                        "title" : "Modified",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{173, 217, 55, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "48D80787-742E-4E64-99ED-83492D749FC3-3419-0000C127A3304671",
                        "checkList" : false,
                        "title" : "Exclusive",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{173, 217, 55, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "A4955E66-19BC-4C38-8235-E06A852C6F2E-3419-0000C127A53947DF",
                        "checkList" : false,
                        "title" : "Shared",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{173, 217, 55, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "F55B87FB-0700-4671-8E4C-D0E1D4BC683D-3419-0000C127A6E910EA",
                        "checkList" : false,
                        "title" : "Invalid",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      }
                    ],
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{173, 217, 55, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "B00A3C53-0862-4D27-BCB7-EA6C5BC679B1-3419-0000C5D8E84862B5",
                "checkList" : false,
                "title" : "MESI缓存一致性协议：MESI对内存访问的控制类似于读写锁，此协议是针对高速缓存的",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "subtopics" : [
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{173, 217, 55, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "E1FDF6E3-36AB-4CCE-BFA4-C3B8F984BAEF-3419-0000C5D8E849ECDD",
                    "checkList" : false,
                    "title" : "缓存条目状态",
                    "position" : "{0, 0}",
                    "note" : {

                    },
                    "highlight" : false,
                    "subtopics" : [
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{173, 217, 55, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "457A63DC-8114-4EFA-A490-724A3C70A2CE-3419-0000C5D8E84AA610",
                        "checkList" : false,
                        "title" : "Modified：相应缓存行包含对相应内存地址所做的更新结果数据",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{173, 217, 55, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "300C087E-D294-4DA5-A896-6C3241FCDB4A-3419-0000C5D8E84B6265",
                        "checkList" : false,
                        "title" : "Exclusive：相应缓存行包含相应内存地址所对应的副本数据，并且以独占的方式保留",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{173, 217, 55, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "9BF2C918-8877-4766-813E-38DB50474A41-3419-0000C5D8E84C66D5",
                        "checkList" : false,
                        "title" : "Shared：相应缓存行包含相应内存地址所对应的数据副本，并且其他处理器的高速缓存也可能包含相同内存地址对应的副本数据",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{173, 217, 55, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "4C8EACF2-F365-4B25-A10B-7822BBD85D1F-3419-0000C5D8E84D10E3",
                        "checkList" : false,
                        "title" : "Invalid：相应缓存行不包含任何内存地址对应的有效副本数据，该状态是缓存行条目的初始状态",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      }
                    ],
                    "checkboxStatus" : 0
                  },
                  {
                    "detach" : false,
                    "style" : {
                      "lineColor" : "{173, 217, 55, 1.00}",
                      "fontName" : "Avenir",
                      "fontStyle" : "normal",
                      "fontWeight" : "normal",
                      "fontFamily" : "Avenir",
                      "enablePalette" : true
                    },
                    "folded" : false,
                    "id" : "113D0577-D930-4177-904A-8E0B1AD130E4-3419-0000C5D8E84DBE7B",
                    "checkList" : false,
                    "title" : "MESI消息类型",
                    "position" : "{0, 0}",
                    "note" : {
                      "text" : "处理器会往总线发送消息，其他处理器或者主内存会做出响应"
                    },
                    "highlight" : false,
                    "subtopics" : [
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{173, 217, 55, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "048F4085-DA2B-4B88-A13E-8ABB44AF2CBB-3419-0000C5D8E84E556E",
                        "checkList" : false,
                        "title" : "Read",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{173, 217, 55, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "F1C1207A-6426-467A-87E0-E61CB033185B-3419-0000C5D8E84EF970",
                        "checkList" : false,
                        "title" : "Read Response",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{173, 217, 55, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "15AC9EDF-5860-4F64-9764-279AFEE36829-3419-0000C5D8E84F9B3F",
                        "checkList" : false,
                        "title" : "Invalidate",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{173, 217, 55, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "F648EBEC-D940-4F55-95C4-E5EB6F052DAA-3419-0000C5D8E8503A24",
                        "checkList" : false,
                        "title" : "Invalidate Acknowledge",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{173, 217, 55, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "0988FFDC-21CF-480E-A55A-F70EB69A9707-3419-0000C5D8E850D294",
                        "checkList" : false,
                        "title" : "Read Invalidate",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      },
                      {
                        "detach" : false,
                        "style" : {
                          "lineColor" : "{173, 217, 55, 1.00}",
                          "fontName" : "Avenir",
                          "fontStyle" : "normal",
                          "fontWeight" : "normal",
                          "fontFamily" : "Avenir",
                          "enablePalette" : true
                        },
                        "folded" : false,
                        "id" : "DA15422F-EA54-4BD7-82FD-D9A445B5D8F6-3419-0000C5D8E8516E5B",
                        "checkList" : false,
                        "title" : "Writeback",
                        "position" : "{0, 0}",
                        "note" : {

                        },
                        "highlight" : false,
                        "checkboxStatus" : 0
                      }
                    ],
                    "checkboxStatus" : 0
                  }
                ],
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{173, 217, 55, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "B3A2F267-2047-4301-AC88-5880B4791F1A-3419-0000C5DA60774021",
            "checkList" : false,
            "title" : "写缓冲器（Store\/Write Buffer）",
            "position" : "{0, 0}",
            "note" : {
              "text" : "写缓冲器使得处理器进行写操作的时候可以不用等待其他处理器全部回复Invalidate Acknowledge以后才进行更新缓存行，而是直接将写操作数据写入写缓冲器以后就认为该写操作已经完成。\n后续处理器接收到所有Invalidate Acknowledge后再将写缓冲器的相应数据写入相应缓存行中"
            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{173, 217, 55, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "651F6356-7CAD-40D2-988E-ACD84F060D49-3419-0000C7A66373B0A7",
                "checkList" : false,
                "title" : "存储转发",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "一个处理器在更新完一个变量紧接着又读取该变量的时候可以直接从写缓冲器中读取相应数据"
                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{173, 217, 55, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "8DE85E6C-4B38-4385-8614-F6D642907472-3419-0000C9B8FF4FA67A",
                "checkList" : false,
                "title" : "特性：处理器内部的私有存储部件，一个处理器的写缓冲器内容是无法被其他处理器读取的",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{173, 217, 55, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "605E3D5A-836A-4E67-821F-CBB68DB097CA-3419-0000C9D01F72D209",
                "checkList" : false,
                "title" : "导致问题：内存重排序和可见性问题",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{173, 217, 55, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "06A6A460-EDAB-4953-8566-5963B6FDB3F0-3419-0000C6F2DEA627AC",
            "checkList" : false,
            "title" : "无效化队列（Invalidate Queue）（x86处理器没有使用无效化队列）",
            "position" : "{0, 0}",
            "note" : {
              "text" : "处理器接收到Invalidate消息后并用不把相应数据（逻辑）删除后再返回Invalidate Acknowledge，而是直接把消息存入无效化队列以后就返回Invalidate Acknowledge，从而减少写操作处理器所需的等待时间"
            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{173, 217, 55, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "E991761C-7F1D-4885-B191-8922A1BF79BE-3419-0000CC2E4B78CDCF",
                "checkList" : false,
                "title" : "导致问题：可见性问题",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{173, 217, 55, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "68C27B9D-B055-41AD-A9B8-B39C73FB4046-3419-0000CC156F331546",
            "checkList" : false,
            "title" : "内存屏障",
            "position" : "{0, 0}",
            "note" : {
              "text" : "基本内存屏障是对一系列指令的称呼，这些指令禁止该指令左边的任何X操作与该指令右边的任何Y操作重排序，从而确保该指令左边的所有X操作先于该指令右边的Y操作提交，即内存操作作用到高速缓存或者主存上"
            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{173, 217, 55, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "0AE1E03C-79AD-4F59-BA7F-4049FB75692A-3419-0000CDDE7552878A",
                "checkList" : false,
                "title" : "StoreLoad：许多处理器将此屏障实现为通用屏障，能够实现其他三种屏障的效果",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{173, 217, 55, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "8237A66C-CE8B-47FA-88B8-A83DFAC0A254-3419-0000CDE00EBD2B39",
                "checkList" : false,
                "title" : "StoreStore",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{173, 217, 55, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "35E84F48-7DA2-464B-87D6-4E0F6529EB9E-3419-0000CDE1C5A29292",
                "checkList" : false,
                "title" : "LoadStore",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              },
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{173, 217, 55, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "7E8619EF-7671-4683-9EF5-D91E418C959A-3419-0000CDE3ECAFE03A",
                "checkList" : false,
                "title" : "LoadLoad",
                "position" : "{0, 0}",
                "note" : {

                },
                "highlight" : false,
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{173, 217, 55, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "0338B4C2-279E-470B-B31C-0CCFFB7E5D8B-3419-0000D5A634A41F75",
            "checkList" : false,
            "title" : "对原子性，可见性，有序性的保证",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "subtopics" : [
              {
                "detach" : false,
                "style" : {
                  "lineColor" : "{173, 217, 55, 1.00}",
                  "fontName" : "Avenir",
                  "fontStyle" : "normal",
                  "fontWeight" : "normal",
                  "fontFamily" : "Avenir",
                  "enablePalette" : true
                },
                "folded" : false,
                "id" : "FBBF7BA3-9EDB-47BE-AB16-1FEF77B1ACE1-3419-0000D5AD39E1E764",
                "checkList" : false,
                "title" : "原子性",
                "position" : "{0, 0}",
                "note" : {
                  "text" : "JMM规定对除了double\/long以外的基本类型和引用类型的读写操作具有原子性，并且特别规定对volatile修饰的double\/long类型的读写操作也具有原子性"
                },
                "highlight" : false,
                "checkboxStatus" : 0
              }
            ],
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{251, 168, 71, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "A07C6BE6-9BCB-48D8-A1E1-63D5DD096AA8-3419-0000E01C539789C6",
        "checkList" : false,
        "title" : "jvm对内部锁的优化（仅在server模式下起作用）",
        "position" : "{0, 0}",
        "note" : {

        },
        "highlight" : false,
        "subtopics" : [
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{251, 168, 71, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "76B5A1BC-E555-4471-B174-A079FDF197CB-3419-0000E502C137B430",
            "checkList" : false,
            "title" : "锁消除",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{251, 168, 71, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "B5C893AA-69DC-4245-A5BE-96C016BD9F62-3419-0000E5046B7A5446",
            "checkList" : false,
            "title" : "锁粗化",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{251, 168, 71, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "F1392734-0106-4DAB-8839-C01E1FDFDDC3-3419-0000E50606BB3616",
            "checkList" : false,
            "title" : "偏向锁：适合于大多数锁不存在锁争用的系统中，如果大多数锁都存在锁争用，可以考虑关闭偏向锁优化，可能会膨胀成轻量级锁",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{251, 168, 71, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "A8CC1CCE-93B0-4F49-89CB-933217B7588A-3419-0000E55F64D73D50",
            "checkList" : false,
            "title" : "适应性锁（轻量级锁）：适合于绝大多数线程对该锁的持有时间较短的情况，追求响应时间，通过自旋等待避免了上下文切换",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          },
          {
            "detach" : false,
            "style" : {
              "lineColor" : "{251, 168, 71, 1.00}",
              "fontName" : "Avenir",
              "fontStyle" : "normal",
              "fontWeight" : "normal",
              "fontFamily" : "Avenir",
              "enablePalette" : true
            },
            "folded" : false,
            "id" : "C14E2208-5C77-4854-94C4-DA8A0C94B6A2-24036-0000F26BD023F667",
            "checkList" : false,
            "title" : "重量级锁：追求吞吐量，当绝大多数线程对锁的持有时间较长或者锁争用程度较高时轻量级锁可能会膨胀成重量级锁",
            "position" : "{0, 0}",
            "note" : {

            },
            "highlight" : false,
            "checkboxStatus" : 0
          }
        ],
        "checkboxStatus" : 0
      },
      {
        "detach" : false,
        "style" : {
          "lineColor" : "{102, 106, 126, 1.00}",
          "fontName" : "Avenir",
          "fontStyle" : "normal",
          "fontWeight" : "normal",
          "fontFamily" : "Avenir",
          "enablePalette" : true
        },
        "folded" : false,
        "id" : "1DB9E999-032A-4523-9484-5B20C6FF6469-24036-0000F02B033439EF",
        "checkList" : false,
        "title" : "java对象内存布局",
        "position" : "{0, 0}",
        "note" : {

        },
        "highlight" : false,
        "checkboxStatus" : 0
      }
    ],
    "checkboxStatus" : 0
  },
  "createTime" : 1558522097.126709,
  "mapName" : ""
}